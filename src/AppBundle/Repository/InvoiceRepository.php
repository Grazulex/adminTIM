<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Invoice;
use Doctrine\ORM\QueryBuilder;

/**
 * DepotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function retrieveAllDraft()
    {
        $query = $this->createQueryBuilder('i')
            ->select('COUNT(i)') 
            ->where('i.status = 0')
            ->getQuery();
            return $query->getSingleScalarResult();

    }      
    
    public function retrieveDraft($nbr)
    {
        $query = $this->createQueryBuilder('i')
            ->where('i.status = 0')
            ->orderBy('i.created','ASC')
            ->setMaxResults($nbr)    
            ->getQuery();
            return $query->getResult();

    }        
 
    public function findLastNumber()
    {
        $query = $this->createQueryBuilder('i')            
            ->where('i.invoice_number like :year')
            ->setParameters(array('year' => date("y").'%'))
            ->setMaxResults(1)
            ->orderBy('i.invoice_number','desc')
            ->getQuery();
            return $query->getOneOrNullResult();

    }    
    
    public function LoadorCreateInvoice(\AppBundle\Entity\Customer $customer)
    {
        $query = $this->createQueryBuilder('i') 
            ->where('i.customer = :customer')
            ->andWhere('i.status = 0')
            ->setParameters(array('customer' => $customer))
            ->getQuery();
            if (!$invoice = $query->getOneOrNullResult()) {
                $em = $this->getEntityManager();
                $invoice = new Invoice();
                $invoice->setCustomer($customer);
                $em->persist($invoice);
                $em->flush();
            }
            return $invoice;

    }      

}